import numpy as np
from ..exceptions import ValidationError as ValidationError
from ..models import AlignmentMill as AlignmentMill
from ..physical_constants import constants as constants
from ..testing import compare_values as compare_values
from ..util import distance_matrix as distance_matrix, linear_sum_assignment as linear_sum_assignment, random_rotation_matrix as random_rotation_matrix, uno as uno, which_import as which_import
from typing import List, Optional, Union

def B787(cgeom: np.ndarray, rgeom: np.ndarray, cuniq: np.ndarray, runiq: np.ndarray, do_plot: bool = False, verbose: int = 1, atoms_map: bool = False, run_resorting: bool = False, mols_align: Union[bool, float] = False, run_to_completion: bool = False, algorithm: str = 'hungarian_uno', uno_cutoff: float = 0.001, run_mirror: bool = False): ...
def kabsch_align(rgeom: np.ndarray, cgeom: np.ndarray, weight: Optional[np.ndarray] = None): ...
def kabsch_quaternion(P, Q): ...
def compute_scramble(nat: int, do_resort: Union[bool, List, np.ndarray] = True, do_shift: Union[bool, List, np.ndarray] = True, do_rotate: Union[bool, List, np.ndarray] = True, deflection: float = 1.0, do_mirror: bool = False) -> AlignmentMill: ...
