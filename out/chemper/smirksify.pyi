from _typeshed import Incomplete
from chemper.chemper_utils import ImproperDict as ImproperDict, ValenceDict as ValenceDict, get_typed_molecules as get_typed_molecules, match_reference as match_reference
from chemper.graphs.cluster_graph import ClusterGraph as ClusterGraph
from chemper.mol_toolkits import mol_toolkit as mol_toolkit

def print_smirks(smirks_list) -> None: ...

class ClusteringError(Exception):
    msg: Incomplete
    def __init__(self, msg) -> None: ...

class SMIRKSifier:
    molecules: Incomplete
    intermediate_smirks: Incomplete
    cluster_list: Incomplete
    verbose: Incomplete
    max_layers: Incomplete
    strict_smirks: Incomplete
    dict_type: Incomplete
    cluster_dict: Incomplete
    ref_labels: Incomplete
    total: int
    def __init__(self, molecules, cluster_list, max_layers: int = 5, verbose: bool = True, strict_smirks: bool = True) -> None: ...
    def make_smirks(self): ...
    def types_match_reference(self, current_types: Incomplete | None = None): ...
    current_smirks: Incomplete
    def reduce(self, max_its: int = 1000, verbose: Incomplete | None = None): ...

class Reducer:
    verbose: Incomplete
    current_smirks: Incomplete
    molecules: Incomplete
    cluster_dict: Incomplete
    def __init__(self, smirks_list, mols, verbose: bool = False) -> None: ...
    def remove_one_sub_dec(self, input_ors, ref_idx): ...
    def remove_ref_sub_decs(self, input_ors, ref_idx): ...
    def remove_ref(self, input_ors, ref_idx): ...
    def remove_all_bases(self, input_ors): ...
    def remove_all_dec_type(self, input_ors): ...
    def remove_or_atom(self, input_all_ors, or_idx): ...
    def remove_or(self, input_all_ors, is_bond: bool = False): ...
    def remove_and(self, input_all_ands): ...
    def remove_decorator(self, smirks): ...
    def run(self, max_its: int = 1000, verbose: Incomplete | None = None): ...
