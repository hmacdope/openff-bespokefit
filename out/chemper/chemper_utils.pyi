from _typeshed import Incomplete
from collections.abc import MutableMapping

def get_data_path(relative_path, package: str = 'chemper'): ...
def get_full_path(relative_path, package: str = 'chemper'): ...
def is_valid_smirks(smirks): ...

class TransformedDict(MutableMapping):
    store: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __keytransform__(self, key): ...

class ValenceDict(TransformedDict):
    def __keytransform__(self, key): ...

class ImproperDict(TransformedDict):
    def __keytransform__(self, key): ...

def get_typed_molecules(smirks_list, input_molecules): ...
def create_tuples_for_clusters(smirks_list, molecules): ...
def get_smirks_matches(mol, smirks): ...
def score_match_reference(current_assignments, ref_assignments): ...
def match_reference(current_assignments, ref_assignments): ...
def check_smirks_to_reference(current_types, reference_assignments, molecules): ...
def check_smirks_agree(current_types, reference_types, molecules): ...
