from _typeshed import Incomplete
from chemper.mol_toolkits.adapters import AtomAdapter as AtomAdapter, BondAdapter as BondAdapter, MolAdapter as MolAdapter

class Mol(MolAdapter):
    mol: Incomplete
    def __init__(self, mol) -> None: ...
    @classmethod
    def from_smiles(cls, smiles): ...
    def set_aromaticity_mdl(self) -> None: ...
    def get_atoms(self): ...
    def get_atom_by_index(self, idx): ...
    def get_bonds(self): ...
    def get_bond_by_index(self, idx): ...
    def get_bond_by_atoms(self, atom1, atom2): ...
    def smirks_search(self, smirks): ...
    def get_smiles(self): ...

class Atom(AtomAdapter):
    atom: Incomplete
    def __init__(self, atom) -> None: ...
    def atomic_number(self): ...
    def degree(self): ...
    def connectivity(self): ...
    def valence(self): ...
    def formal_charge(self): ...
    def hydrogen_count(self): ...
    def ring_connectivity(self): ...
    def min_ring_size(self): ...
    def is_aromatic(self): ...
    def get_index(self): ...
    def is_connected_to(self, atom2): ...
    def get_neighbors(self): ...
    def get_bonds(self): ...
    def get_molecule(self): ...

class Bond(BondAdapter):
    bond: Incomplete
    def __init__(self, bond) -> None: ...
    def get_order(self): ...
    def get_atoms(self): ...
    def is_ring(self): ...
    def is_aromatic(self): ...
    def is_single(self): ...
    def is_double(self): ...
    def is_triple(self): ...
    def get_molecule(self): ...
    def get_index(self): ...

def mols_from_mol2(mol2_file): ...
