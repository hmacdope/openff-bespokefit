import abc
from abc import ABC, abstractmethod

class MolAdapter(ABC, metaclass=abc.ABCMeta):
    @classmethod
    @abstractmethod
    def from_smiles(cls, smiles): ...
    @abstractmethod
    def set_aromaticity_mdl(self): ...
    @abstractmethod
    def get_atoms(self): ...
    @abstractmethod
    def get_atom_by_index(self, idx): ...
    @abstractmethod
    def get_bonds(self): ...
    @abstractmethod
    def get_bond_by_index(self, idx): ...
    @abstractmethod
    def get_bond_by_atoms(self, atom1, atom2): ...
    @abstractmethod
    def smirks_search(self, smirks): ...
    @abstractmethod
    def get_smiles(self): ...

class AtomAdapter(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def atomic_number(self): ...
    @abstractmethod
    def degree(self): ...
    @abstractmethod
    def connectivity(self): ...
    @abstractmethod
    def valence(self): ...
    @abstractmethod
    def formal_charge(self): ...
    @abstractmethod
    def hydrogen_count(self): ...
    @abstractmethod
    def min_ring_size(self): ...
    @abstractmethod
    def ring_connectivity(self): ...
    @abstractmethod
    def is_aromatic(self): ...
    @abstractmethod
    def get_index(self): ...
    @abstractmethod
    def is_connected_to(self, atom2): ...
    @abstractmethod
    def get_neighbors(self): ...
    @abstractmethod
    def get_bonds(self): ...
    @abstractmethod
    def get_molecule(self): ...

class BondAdapter(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def get_order(self): ...
    @abstractmethod
    def get_atoms(self): ...
    @abstractmethod
    def is_ring(self): ...
    @abstractmethod
    def is_aromatic(self): ...
    @abstractmethod
    def is_single(self): ...
    @abstractmethod
    def is_double(self): ...
    @abstractmethod
    def is_triple(self): ...
    @abstractmethod
    def get_molecule(self): ...
    @abstractmethod
    def get_index(self): ...
