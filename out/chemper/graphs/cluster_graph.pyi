from typing import Literal
from _typeshed import Incomplete
from chemper.graphs.single_graph import SingleGraph as SingleGraph
from chemper.mol_toolkits import mol_toolkit as mol_toolkit

class ClusterGraph(SingleGraph):
    class AtomStorage:
        decorators: Incomplete
        label: Incomplete
        def __init__(self, atoms: Incomplete | None = None, label: Incomplete | None = None) -> None: ...
        def __lt__(self, other): ...
        def __eq__(self, other): ...
        def __hash__(self): ...
        def make_atom_decorators(self, atom): ...
        def as_smirks(self, compress: bool = False): ...
        def add_atom(self, atom) -> None: ...
        def compare_atom(self, atom): ...
    class BondStorage:
        order: Incomplete
        ring: Incomplete
        order_dict: Incomplete
        label: Incomplete
        def __init__(self, bonds: Incomplete | None = None, label: Incomplete | None = None) -> None: ...
        def __lt__(self, other): ...
        def __eq__(self, other): ...
        def __hash__(self): ...
        def as_smirks(self): ...
        def add_bond(self, bond) -> None: ...
        def compare_bond(self, bond): ...
    mols: Incomplete
    smirks_atoms_lists: Incomplete
    layers: Incomplete
    def __init__(self, mols: Incomplete | None = None, smirks_atoms_lists: Incomplete | None = None, layers: Literal['all'] | int = 0) -> None: ...
    def as_smirks(self, compress: bool = False): ...
    def get_symmetry_funct(self, sym_label): ...
    def add_mol(self, input_mol, smirks_atoms_list) -> None: ...
    def find_pairs(self, atoms_and_bonds, storages): ...
