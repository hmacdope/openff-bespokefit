from .client_base import PortalClientBase as PortalClientBase
from .managers import ManagerActivationBody as ManagerActivationBody, ManagerName as ManagerName, ManagerStatusEnum as ManagerStatusEnum, ManagerUpdateBody as ManagerUpdateBody
from .metadata_models import TaskReturnMetadata as TaskReturnMetadata
from .tasks import TaskClaimBody as TaskClaimBody, TaskReturnBody as TaskReturnBody
from _typeshed import Incomplete
from qcportal.record_models import RecordTask as RecordTask
from typing import Dict, List, Optional

class ManagerClient(PortalClientBase):
    manager_name_data: Incomplete
    def __init__(self, name_data: ManagerName, address: str = 'https://api.qcarchive.molssi.org', username: Optional[str] = None, password: Optional[str] = None, verify: bool = True, show_motd: bool = False) -> None: ...
    def activate(self, manager_version: str, programs: Dict[str, List[str]], tags: List[str]) -> None: ...
    def deactivate(self, active_tasks: int, active_cores: int, active_memory: float, total_cpu_hours: float) -> None: ...
    def heartbeat(self, active_tasks: int, active_cores: int, active_memory: float, total_cpu_hours: float) -> None: ...
    def claim(self, programs: Dict[str, List[str]], tags: List[str], limit: int) -> List[RecordTask]: ...
    def return_finished(self, results_compressed: Dict[int, bytes]) -> TaskReturnMetadata: ...
