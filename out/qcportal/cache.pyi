from _typeshed import Incomplete
from typing import Any, Dict, List

class PortalCache:
    client: Incomplete
    server_fingerprint: Incomplete
    cachedir: Incomplete
    metafile: Incomplete
    cachefile: Incomplete
    memcache: Incomplete
    def __init__(self, client, cachedir, max_memcache_size) -> None: ...
    def put(self, items: List[Any], entity_type: str): ...
    def get(self, ids: List[str], entity_type: str) -> Dict[str, Any]: ...
    def stamp_cache(self) -> None: ...
    def check_cache(self) -> None: ...

class MemCache:
    data: Incomplete
    maxsize: Incomplete
    def __init__(self, maxsize) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __getitem__(self, key): ...
    def __contains__(self, item) -> bool: ...
    def garbage_collect(self): ...
    def get(self, key, default: Incomplete | None = None): ...
