from _typeshed import Incomplete
from collections.abc import Generator
from pydantic import BaseModel
from qcportal.serialization import deserialize as deserialize
from typing import Any, Dict, Iterable, List, Optional

class DatasetViewWrapper(BaseModel):
    class Config:
        extra: Incomplete
    view_path: str
    def __init__(self, **data) -> None: ...
    def validate_path(cls, v): ...
    @staticmethod
    def deserialize_dict(data_bytes) -> Dict[str, Any]: ...
    @staticmethod
    def deserialize_model(data_bytes, model): ...
    def get_datamodel(self) -> Dict[str, Any]: ...
    def get_entry_names(self) -> List[str]: ...
    def get_specifications(self, specification_type) -> Dict[str, Any]: ...
    def get_entries(self, entry_type, entry_names: Optional[Iterable[str]] = None) -> Dict[str, Any]: ...
    def get_record_item(self, record_item_type, entry_name: str, specification_name: str): ...
    def iterate_records(self, record_item_type) -> Generator[Incomplete, None, None]: ...
