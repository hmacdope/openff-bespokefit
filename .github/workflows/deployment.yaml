name: Deployment tests

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  release:
    types:
      - released
      - prereleased
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

defaults:
  run:
    shell: bash -l {0}

jobs:
  test:

    name: ${{ matrix.os }}, 🐍=${{ matrix.python-version }}, 👁️=${{ matrix.openeye }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9"]
        openeye: ["true", "false"]

    env:
      OE_LICENSE: ${{ github.workspace }}/oe_license.txt

    steps:
      - uses: actions/checkout@v3

      - name: Install latest release from conda with OpenEye Toolkits
        if: ${{ matrix.openeye == 'true' }}
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: devtools/conda-envs/deployment_openeye.yaml
          extra-specs: |
            python=${{ matrix.python-version }}

      - name: Install latest release from conda without OpenEye Toolkits
        if: ${{ matrix.openeye == 'false' }}
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: devtools/conda-envs/deployment.yaml
          extra-specs: |
            python=${{ matrix.python-version }}

      - name: License OpenEye Toolkits
        if: ${{ matrix.openeye == true }}
        env:
          OE_LICENSE_TEXT: ${{ secrets.OE_LICENSE }}
        run: |
          echo "${OE_LICENSE_TEXT}" > ${OE_LICENSE}
          python -c "from openeye import oechem; assert oechem.OEChemIsLicensed()"

      - name: Verify that the latest version was installed
        run: |
          cd /tmp/

          export LATEST_TAG=$(git ls-remote --tags https://github.com/openforcefield/openff-bespokefit.git | cut -f2 | grep -E "([0-9]+)\.([0-9]+)\.([0-9]+)$" | sort --version-sort | tail -1 | sed 's/refs\/tags\///')
          export FOUND_VER=$(python -c "import openff.bespokefit; print(openff.bespokefit.__version__)")

          if [[ $LATEST_TAG != $FOUND_VER ]]; then
            echo "Latest tag is"
            echo $LATEST_TAG
            echo "Found version is"
            echo $FOUND_VER
            echo "Version mismatch"
            exit 1
          fi

          cd -

      - name: Run tests
        run: |
          python -c "from openeye import oechem; assert oechem.OEChemIsLicensed()"
          python -m pytest -v openff/bespokefit/tests/executor/services/coordinator/test_app.py::test_get_molecule_image

