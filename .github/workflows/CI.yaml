name: CI

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  schedule:
    - cron: "0 0 * * *"

defaults:
  run:
    shell: bash -l {0}

jobs:
  test:

    name: ${{ matrix.os }}, 🐍=${{ matrix.python-version }}, 💢=${{ matrix.pydantic-version }}, 👁️=${{ matrix.openeye }}, ∫=${{ matrix.integration }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.9"]
        pydantic-version: ["1"]
        openeye: [true, false]
        integration: [false]

    env:
      OE_LICENSE: ${{ github.workspace }}/oe_license.txt

    steps:
      - uses: actions/checkout@v4

      - name: Install with OpenEye Toolkits
        if: ${{ matrix.openeye == true }}
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: devtools/conda-envs/test-env.yaml
          create-args: >-
            python=${{ matrix.python-version }}
            pydantic=${{ matrix.pydantic-version }}

      - name: Install with AmberTools
        if: ${{ matrix.openeye == false }}
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: devtools/conda-envs/no_openeye.yaml
          create-args: >-
            python=${{ matrix.python-version }}
            pydantic=${{ matrix.pydantic-version }}

      - name: License OpenEye
        if: ${{ matrix.openeye == true }}
        run: |
          echo "${SECRET_OE_LICENSE}" > ${OE_LICENSE}
          python -c "from openeye import oechem; assert oechem.OEChemIsLicensed()"
        env:
          SECRET_OE_LICENSE: ${{ secrets.OE_LICENSE }}

      - name: Install Package
        run: python setup.py develop --no-deps

      - name: Conda Environment Information
        run: |
          micromamba info
          micromamba list

      - name: Run Passing Tests
        run: |
          python -m pytest -nauto openff/bespokefit/_tests \
              --cov=openff --cov-config=setup.cfg openff/bespokefit/_tests --cov-report=xml \
              --ignore=openff/bespokefit/_tests/cli/test_cache.py \
              --ignore=openff/bespokefit/_tests/optimizers/forcebalance/test_factories.py \
              --ignore=openff/bespokefit/_tests/executor/services/coordinator/ \
              --ignore=openff/bespokefit/_tests/schema/test_targets.py \
              --ignore=openff/bespokefit/_tests/cli/executor/test_submit.py \
              --ignore=openff/bespokefit/_tests/cli/executor/test_retrieve.py \
              --ignore=openff/bespokefit/_tests/optimizers/forcebalance/test_forcebalance.py \
              --ignore=openff/bespokefit/_tests/executor/services/qcgenerator/test_app.py

      - name: Run Failing Tests
        continue-on-error: true
        run: |
          python -m pytest -nauto \
              openff/bespokefit/_tests/cli/test_cache.py \
              openff/bespokefit/_tests/optimizers/forcebalance/test_factories.py \
              openff/bespokefit/_tests/executor/services/coordinator/ \
              openff/bespokefit/_tests/schema/test_targets.py \
              openff/bespokefit/_tests/cli/executor/test_submit.py \
              openff/bespokefit/_tests/cli/executor/test_retrieve.py \
              openff/bespokefit/_tests/optimizers/forcebalance/test_forcebalance.py \
              openff/bespokefit/_tests/executor/services/qcgenerator/test_app.py

      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Run Integration Tests
        if: ${{ matrix.integration == true }}
        run: |
          openff-bespoke executor run --smiles                 'CC'               \
                                      --workflow               'default'          \
                                      --default-qc-spec        xtb gfn2xtb none   \
                                      --target-torsion         '[C:1]-[C:2]'

      - name: Run mypy
        run: |
          pip install mypy
          mypy --install-types
          mypy -p "openff.bespokefit"